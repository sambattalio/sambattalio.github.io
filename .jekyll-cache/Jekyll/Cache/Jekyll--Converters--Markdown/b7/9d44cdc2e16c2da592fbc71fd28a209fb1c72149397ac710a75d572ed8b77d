I"T<p>Blog 7:</p>

<p>From my experience, I am certainly biased towards the bazaar model, as that is the model which is prevalent and most common in today’s open source community. The cathedral and bazaar style both release code to the public, however the cathedral keeps the inter-version code behind lock and key away from the masses. I personally think this is against the idea of open source development and creates a non-inclusive development environment where a select few are deemed smart enough to have the privilege of working on said project. I have not had any experience working in the cathedral model, and I really could only see its benefits in a commercial environment where you want to hide your idea until you release it. This doesn’t make much sense at all for free things such as Emacs (Sorry RMS you might be wrong here buddy).</p>

<p>To take from lesson 6 of good open source software, you absolutely should use your users as minions and drones to help you make the software as good as possible. Who better to fix bugs than people who are bothered by it and are passionate about making it better? That is a large reason why I think the cathedral model is inefficient, it doesn’t allow free work to be done by people who genuinely want to. I have personally experienced this situation with the bazaar model, and honestly, I grew a sense of pride by fixing the bugs I did. For example, I pushed a feature to an AWS Cloudformation project I used heavily in an internship. However, the CI/CD wasn’t working, and I knew it wasn’t me. So I went through several OPEN SOURCE repositories and found the bug was in the linter itself they that ran, and fixed that bug to allow my feature to be accepted. This sort of interaction would not be allowed if AWS were to use a cathedral model of software. Further, this allows me as a user to fully understand the software I am using, and better apply it to my needs.</p>

<p>I do think the bazaar model has rightfully won today, as I literally haven’t experienced the cathedral model to my knowledge. I also think it is the future of open source software development, but not software development in general. In previous readings I have defended this viewpoint, but not all development should be open sourced therefore not all should follow this model.</p>

<p>I don’t honestly think there is be a middle ground between these models. Maybe my feeble mind cannot think of this as I haven’t used the cathedral model, but it just seems outdated and “wrong” to do in the modern age of open source development. People love to fix things and have their “name” attached as a contributor to a project they love. It does seem like something a guy like Stallman would use though. At the end of the day, however, using the cathedral model is better than nothing released at all. I appreciate the effort to at least.</p>

<p>~ Sam</p>
:ET