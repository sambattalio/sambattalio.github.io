<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://sambattalio.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sambattalio.github.io/" rel="alternate" type="text/html" /><updated>2021-04-19T12:32:00-04:00</updated><id>https://sambattalio.github.io/feed.xml</id><title type="html">Gigachad</title><subtitle>Hackers in the Bazaar Blogs.
</subtitle><author><name>Sam Battalio</name></author><entry><title type="html">Reading 09: üÖ±Ô∏èagic Cauldron</title><link href="https://sambattalio.github.io/reading-09/" rel="alternate" type="text/html" title="Reading 09: üÖ±Ô∏èagic Cauldron" /><published>2021-04-19T05:32:20-04:00</published><updated>2021-04-19T05:32:20-04:00</updated><id>https://sambattalio.github.io/reading-09</id><content type="html" xml:base="https://sambattalio.github.io/reading-09/">&lt;p&gt;Blog 9:&lt;/p&gt;

&lt;p&gt;Given the current climate of software engineering and my personal experience
with open source and industry, I very strongly believe open source still makes
business sense. Look at all of these ‚Äúas-a-service‚Äù platforms out there in the
world right now. Many of them are supported by their own open source code, but
they just provide the management or hardware to physically run these services.
Further, things like docker proves that open source is still very much viable 
at least in the cloud industry. I think the idea of services makes great business sense, as it directly increases value for companies, but also provides a largely pay as you go approach for consuming businesses where they can scale appropriately and affordably.&lt;/p&gt;

&lt;p&gt;I find the term of ‚Äúcollecting rent‚Äù to be better of course in proprietary or full services, like think of photoshop. They don‚Äôt need independent review, they have a viable product. The feedback they get they can implement themselves and it works out. Other things like docker are very much community based and thrive on independent work from peers. It certainly is a tradeoff, and I think it comes down to scale of the project and production teams behind it. If you can support yourself, get that bread by any means possible. But if you need a massive project to have constant improvement and development and it is used BY SOFTWARE DEVELOPERS, why not just crowdsource their work? Artists aren‚Äôt going to contribute PR‚Äôs to a hypothetical open source Photoshop. Developers WILL do that for their favorite cloud platform or AWS library.&lt;/p&gt;

&lt;p&gt;I believe that further, in this cloud dominated world, ESR was laregly right. Having seen the breadth of cloud infrastructure which is open source and ubiqutous, it really shows the open core model holds true. I am confident open source will stay, as developers like having standards in an industry, and open source is a great way to keep consistent features and platforms. How else will they help
each other on stackoverflow?&lt;/p&gt;

&lt;p&gt;The one problem that arises is big tech utilizing open source projects but giving nothing back to it. I am not sure you can do anything about it except just be kind of sad. In a true open source cauldron, you have to accept non-reciprocating members who just want the thing and nothing else. I think providing personalization for donations helps this though. For example, providing intensive support for X feature if Y company donates to the project. This gives the companies incentives to donate, without really just donating. This way is more of a consulting model. At the end of the day, you have to think of the bottom line.&lt;/p&gt;

&lt;p&gt;Long story short, the open source business model is far from broken in my eyes.
Though some people might get the short stick, or projects die off due to lack of funding, we can see largely with the flagships like k8s or docker and even Amazon‚Äôs open source push that it is here to stay. Why else would big companies invest so much in it if it was a fad? Its time to sip the cauldron and make some PRs.&lt;/p&gt;

&lt;p&gt;~ Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Blog 9:</summary></entry><entry><title type="html">Reading 08: What? I turned this in saturday idk what you‚Äôre talking about</title><link href="https://sambattalio.github.io/reading-08/" rel="alternate" type="text/html" title="Reading 08: What? I turned this in saturday idk what you‚Äôre talking about" /><published>2021-04-10T02:32:20-04:00</published><updated>2021-04-10T02:32:20-04:00</updated><id>https://sambattalio.github.io/reading-08</id><content type="html" xml:base="https://sambattalio.github.io/reading-08/">&lt;p&gt;Blog 8:&lt;/p&gt;

&lt;p&gt;Open source is such an interesting part of computing which is so unique, wherein people are readily available to work together for ‚Äúfree‚Äù to solve a common goal. I say this is unique as you wouldn‚Äôt see this commonly in things like IB, marketing, etc. In what is largely seen as a fairly competitive industry marked by stolen ideas in the valley, it is wild to me that open source is so popular. To ESR, people are driven to participate in OSSD for what I see as two different major reasons. First is what I identify with the most, zealotry. As I described in class discussion last week, I basically shilled and was a big zealot guy. Another is anti-commercial, where they participate directly in competition with selling similar software. This is marked by the RMS types (total gigachads (see picture on top)). Even with this type, there is a strong feeling of loyalty towards projects, like pbui and void linux. I feel like in a way, this level of loyalty could at times be harmful to ‚Äúnew‚Äù members of a community. By no means am I saying pbui is too loyal to void, but it is VERY intimidating to jump into a new project‚Äôs discord, issue board, or irc channel and see the giga-contributors. It is something I think people just have to ‚Äúget over‚Äù mentally, as I did, and realize most people in software won‚Äôt drop an RMS or Torvalds-esque rant at your first bug fix as long as you aren‚Äôt obnoxious about it.&lt;/p&gt;

&lt;p&gt;I think that the taboos listed by ESR are honestly really strong ways to keep a community central and strong. I find that there is a big pressure against forking, as it implies you can do it ‚Äúbetter‚Äù and don‚Äôt want any help or future ideas of the current maintainers. This arises with things like Gimp/Glimp and seems to split/fracture a community. Further, the other two taboos listed are similar in a sense that they are almost ‚Äúcommandments‚Äù to keep a healthy community. They are things which discourage inclusion and tear down the importance of other people‚Äôs work. This is something so important to the open source community, as that is literally one of the only tangible benefits to doing it (being able to see you did it).&lt;/p&gt;

&lt;p&gt;I honestly do see the role of reputation to be fairly appealing to me and I believe a lot of people who contribute to open source. I‚Äôd like to step away from the idea of ego satisfaction however, as I feel that largely leads to crummy code which generally sucks compared to those who actually care about the end product. By this I mean I do think reputation within a project is important, but PRs just to do PRs is fairly harmful for a lot of projects. For example, Hacktoberfest just mercs so many projects on a yearly basis with half-assed PRs for a free shirt‚Ä¶.&lt;/p&gt;

&lt;p&gt;For me, and what I would like to hope is also a lot of other developers, I think the inter-project reputation and pride of further improving projects you care about should be all that motivates you to participate. That or money given a case where you are a paid open source dev at a company. With those stipulations, I find you will get the healthiest and most active/caring members in a community. Open source is really a special thing that I genuinely enjoy taking part in.&lt;/p&gt;

&lt;p&gt;~ Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Blog 8:</summary></entry><entry><title type="html">Reading 07: Covid negative btw</title><link href="https://sambattalio.github.io/reading-07/" rel="alternate" type="text/html" title="Reading 07: Covid negative btw" /><published>2021-04-05T02:32:20-04:00</published><updated>2021-04-05T02:32:20-04:00</updated><id>https://sambattalio.github.io/reading-07</id><content type="html" xml:base="https://sambattalio.github.io/reading-07/">&lt;p&gt;Blog 7:&lt;/p&gt;

&lt;p&gt;From my experience, I am certainly biased towards the bazaar model, as that is the model which is prevalent and most common in today‚Äôs open source community. The cathedral and bazaar style both release code to the public, however the cathedral keeps the inter-version code behind lock and key away from the masses. I personally think this is against the idea of open source development and creates a non-inclusive development environment where a select few are deemed smart enough to have the privilege of working on said project. I have not had any experience working in the cathedral model, and I really could only see its benefits in a commercial environment where you want to hide your idea until you release it. This doesn‚Äôt make much sense at all for free things such as Emacs (Sorry RMS you might be wrong here buddy).&lt;/p&gt;

&lt;p&gt;To take from lesson 6 of good open source software, you absolutely should use your users as minions and drones to help you make the software as good as possible. Who better to fix bugs than people who are bothered by it and are passionate about making it better? That is a large reason why I think the cathedral model is inefficient, it doesn‚Äôt allow free work to be done by people who genuinely want to. I have personally experienced this situation with the bazaar model, and honestly, I grew a sense of pride by fixing the bugs I did. For example, I pushed a feature to an AWS Cloudformation project I used heavily in an internship. However, the CI/CD wasn‚Äôt working, and I knew it wasn‚Äôt me. So I went through several OPEN SOURCE repositories and found the bug was in the linter itself they that ran, and fixed that bug to allow my feature to be accepted. This sort of interaction would not be allowed if AWS were to use a cathedral model of software. Further, this allows me as a user to fully understand the software I am using, and better apply it to my needs.&lt;/p&gt;

&lt;p&gt;I do think the bazaar model has rightfully won today, as I literally haven‚Äôt experienced the cathedral model to my knowledge. I also think it is the future of open source software development, but not software development in general. In previous readings I have defended this viewpoint, but not all development should be open sourced therefore not all should follow this model.&lt;/p&gt;

&lt;p&gt;I don‚Äôt honestly think there is be a middle ground between these models. Maybe my feeble mind cannot think of this as I haven‚Äôt used the cathedral model, but it just seems outdated and ‚Äúwrong‚Äù to do in the modern age of open source development. People love to fix things and have their ‚Äúname‚Äù attached as a contributor to a project they love. It does seem like something a guy like Stallman would use though. At the end of the day, however, using the cathedral model is better than nothing released at all. I appreciate the effort to at least.&lt;/p&gt;

&lt;p&gt;~ Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Blog 7:</summary></entry><entry><title type="html">Reading 06: Guess who turned it in on time?</title><link href="https://sambattalio.github.io/reading-06/" rel="alternate" type="text/html" title="Reading 06: Guess who turned it in on time?" /><published>2021-03-13T11:32:20-05:00</published><updated>2021-03-13T11:32:20-05:00</updated><id>https://sambattalio.github.io/reading-06</id><content type="html" xml:base="https://sambattalio.github.io/reading-06/">&lt;p&gt;Blog 6:&lt;/p&gt;

&lt;p&gt;It totally makes sense that Paul Graham preaches the virtue of startups given his history, but the sad reality is that startups rarely make it. Sure, it could theoretically be your ‚Äúbest bet‚Äù to get rich, but what odds are you betting on here? I like to consider myself a bit more of a pragmatic person, who wouldn‚Äôt dare jump away from a salary unless I had a great idea or total and utter faith and the startup I was jumping to. It seems by the way he phrased his article that you should almost leap before you look and just send it, disregarding your career or the fact you might not have any money-making ideas to form into a startup. That being said, I would absolutely be open to joining/creating one in the future, but now is definitely not the time for me personally, as the idea of throwing away a career and moving back in with my parents because my idea flopped is horrifying. I think this says a lot about Paul Graham and other modern hackers though. It is fairly easy for the winner of a bet to say they ‚Äúknew‚Äù they were going to win. Likewise, I imagine most of these hackers in our society preach this risk because it worked out so greatly for them. Again, I am not wholly calling this a gamble, as Graham had the idea, drive, dedication, etc. But for the average population it very much is a gamble in my eyes.&lt;/p&gt;

&lt;p&gt;I absolutely love the idea that we should be promoting risk taking and entrepreneurship within reason. I mean these values are what made Silicon Valley and for a large part America itself boom into the economic power it is. However, not everyone can be business owners and I think it is largely unrealistic to employ those values on the masses as the be all end all.&lt;/p&gt;

&lt;p&gt;I am not sure if I know what the next big thing is, but I am pretty convinced it will not be VR (at least yet). I feel the growth of mobile computing in the form of tablets and cell phones will continue rapidly. Toddlers are given iPads, kids iPhones/Androids, and it seems like they don‚Äôt get a ‚Äúreal‚Äù computer until far later in their lifespan. For that reason I could feasibly see  the rise of app development culture paired with short burst content (TikTok, Youtube 10 minute videos (optimized for their algorithm)). That is why I think it is a must that any consumer facing website, program, or game should seriously consider going mobile first or at least have strong mobile support. It is what the rising generation knows and loves and will go out of their way to use. Everyone has a phone these days, and I don‚Äôt see any reason why this will stop.&lt;/p&gt;

&lt;p&gt;Overall, I want to end on the idea that startups, though a great risk, are 100% for the better of the world and the individuals around them. It just takes a great idea (or maybe just a good idea at a great time) to be able to jump into that 10xer money.&lt;/p&gt;

&lt;p&gt;~ Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Blog 6:</summary></entry><entry><title type="html">Reading 05: (‚åê‚ñ®¬†‚ñ®)</title><link href="https://sambattalio.github.io/reading-05/" rel="alternate" type="text/html" title="Reading 05: (‚åê‚ñ®¬†‚ñ®)" /><published>2021-03-13T11:32:20-05:00</published><updated>2021-03-13T11:32:20-05:00</updated><id>https://sambattalio.github.io/reading-05</id><content type="html" xml:base="https://sambattalio.github.io/reading-05/">&lt;p&gt;Blog 5:&lt;/p&gt;

&lt;p&gt;I came into the reading thinking the choice of programming language is not as important as Graham lets on and is not a ‚ÄúSecret Weapon‚Äù by any means. However, after going through what he had to say and thinking about it I really tend to agree with his ideas of relative powers of programming languages. Sure, he just seems like a Lisp fanboy, but he makes a convincing argument for the case of high-level languages and the ease of rapid development. The idea of ‚Äúprogramming languages are not just technology, but what programmers think in‚Äù resonates with me greatly. I believe that the language you use is what you immediately start to think of how to solve issues. It makes sense to use a more efficient or higher-level programming language as possible to have efficient thoughts and problem solving. There might be a reason why it seems like all the tech big brains like Lisp, and I might have to take some time to rewire my brain this semester to think in Lisp.&lt;/p&gt;

&lt;p&gt;To expand on my thoughts of power in programming languages, I think it holds mostly with ease of rapid development and clarity. I don‚Äôt think you can argue that a language without recursion is more powerful than one with recursion. Not just thinking about complexity of the language, but this completely hinders the way one can solve solutions. I like to think of languages in their ‚Äúelegance‚Äù in solutions. I do think what we have now as standard in schooling and industry isn‚Äôt even the most powerful option for programming we could have. I completely agree with Graham that OOP is really only applicable for certain scenarios (mostly industry), and I personally think it slows development greatly and occasionally creates and obnoxious amount of hierarchies for what should be a 50 line program. I found especially interesting the Power Appendix in Revenge of the Nerds. He talks about not the power of the language, as they are all Turing complete and CAN solve all the same issues, but if you are efficient in how you solve the problem. As an aside, I do think it‚Äôs also laughable that most ‚Äúbig‚Äù programming languages you have to be tethered to an IDE which auto generates code for you because otherwise it would take too long or tedious. I think this really shows what is generally lacking in our set of tools, this reliance on toolchains to make anything productive. Compare that to what Graham speaks of Lisp and its rapid development and you can start to see some problems.&lt;/p&gt;

&lt;p&gt;I think going forward, I do think OOP makes sense for most big companies. However, I think the idea of functional programming will hold most important personally, as it provides an efficient way to structure code and even just think about solutions. I really think that is the main draw of Lisp for Graham, and why he doesn‚Äôt like other languages as much (their non-inherit FP). Of course, that being said, C/C++/Java/Python/Javascript/etc. are not going anywhere anytime soon (especially java and c++) as they are so engrained into modern technology and are ‚Äútoo big to fail‚Äù at this point.&lt;/p&gt;

&lt;p&gt;As someone who is a self-described ‚Äúwagie‚Äù who has barely dabbled with alternative languages, I think this reading has inspired me to take on the beast of Lisp.&lt;/p&gt;

&lt;p&gt;~ Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Blog 5:</summary></entry><entry><title type="html">Reading 04: Why yes I got an extension, how could you tell?</title><link href="https://sambattalio.github.io/reading-04/" rel="alternate" type="text/html" title="Reading 04: Why yes I got an extension, how could you tell?" /><published>2021-03-07T11:32:20-05:00</published><updated>2021-03-07T11:32:20-05:00</updated><id>https://sambattalio.github.io/reading-04</id><content type="html" xml:base="https://sambattalio.github.io/reading-04/">&lt;p&gt;Blog 4:&lt;/p&gt;

&lt;p&gt;Paul Graham‚Äôs idea of a hacker is a very picturesque and almost idealistic viewpoint of someone connecting with the computer and creating art. Though I feel like I largely agree with his idea of hackers in the sense of painters, I feel like the turn of more political and ‚ÄúAmericanness‚Äù he preaches for hackers might not exactly be something general to hackers.&lt;/p&gt;

&lt;p&gt;Paul Graham‚Äôs hacker is very similar to that of Levy, however as mentioned this shift of Americanness and liberties seems to separate from what Levy preached. Levy seemed to speak of the hacker as almost isolated from normal society, and only caring about stretching the limits of computing. Graham, on the other hand likens a hacker to an artist and characterizes them as people who think or should be thinking about implications of American laws regarding IP. I find this to be the greatest dissonance, where otherwise I find their model of the ‚Äúhacker‚Äù to be generally very similar.&lt;/p&gt;

&lt;p&gt;I found the ideas brought out by Graham to be very thought provoking. The idea of the cyclical hacker is something that really resonated with me. I feel like this is essentially addressing burnout that is faced by many CS majors throughout their schooling or careers. I also found the idea of letting hackers design software rather than write it to achieve success in startups to be very intriguing. It makes sense that in most startups without set ‚Äúdesign‚Äù people or departments the hacker or 10xer who carves up the whole architecture can come up with something quite beautiful. I really enjoyed the idea of the ‚Äústandard deviation‚Äù of output, where not every hacker can design, and letting hackers design isn‚Äôt necessarily the safe bet for most companies. However, it seems more like a gamble. I can definitely agree with this idea Graham brought up and carried this into the idea of hackers striving mostly in new markets in this current landscape.  I do also agree with the ideal that for hackers to find a place to actually write great software is to do it yourself in a startup. You won‚Äôt have the opportunity to write something beautiful generally when writing industry code at a FAANG.&lt;/p&gt;

&lt;p&gt;I didn‚Äôt necessarily like all of the ideas brought up in these essays however. I feel like the whole rant about intellectual property isn‚Äôt fully correct. Sure, total closed source and not allowing to see other ideas could lead to a slower or less productive landscape, but its this shift in laws which allowed the scene to flood with money and with that, more hackers/engineers to create technology at the scale it is today. If it weren‚Äôt for IP protection, technology wouldn‚Äôt be ANYWHERE near it is today, and I feel like Graham overlooks that at least to some extent. Further, I slightly disagree with the pedestal he puts startups and their code quality. I feel like he is really keying in on the 1% of startups that actually make it or have a great ‚Äúhacker‚Äù who can achieve at the level he is talking of. I feel like largely a fair share of startups can achieve just as well or even greater by having the structure in design that big firms hold.&lt;/p&gt;

&lt;p&gt;Honestly, I feel like I resonate with the Graham version of the hacker more than that of the Levy hacker. However, I feel like it is one in the same, or perhaps just a more modern version of this hacker. This, if anything, makes the notion of being a hacker more desirable to me. I feel like the additions and modernizations that Graham brings up provides a more general or attainable hacker, though seemingly romanticizes the idea of a hacker a bit. I felt like I was reading a description of myself at times in looking through ‚ÄúHackers and Painters‚Äù with the design style and levels. I wonder now what the 2020 description of the hacker would look like compared to Graham‚Äôs.&lt;/p&gt;

&lt;p&gt;~ Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Blog 4:</summary></entry><entry><title type="html">Reading 02: Hardware ResidentSleeper</title><link href="https://sambattalio.github.io/reading-02/" rel="alternate" type="text/html" title="Reading 02: Hardware ResidentSleeper" /><published>2021-02-12T11:32:20-05:00</published><updated>2021-02-12T11:32:20-05:00</updated><id>https://sambattalio.github.io/reading-02</id><content type="html" xml:base="https://sambattalio.github.io/reading-02/">&lt;p&gt;I think it is important to spread bits and pieces of the Hacker Ethic to a wider audience, but the full and ‚Äúcomplete‚Äù version of it doesn‚Äôt necessarily apply to everyone. I will touch on this more, but clearly throwing away the decentralization and free information part does not apply to everyone who seeks to actually make profit off of their works.&lt;/p&gt;

&lt;p&gt;In my eyes, the ‚Äútrue hacker‚Äù follows this ethic fully without compromise forming the Stallmans or Davises of the world. However, it seemed like the ‚ÄúHardware Hackers‚Äù were far more entrepreneurial and cognizant of the monetary value of the fruits of their labor. A great example of this is the Homebrew Computer Club, which seemed very similar to the ‚Äútrue hacker‚Äù clubs in the first part of this book. The big difference I noticed while reading was that they made companies and sold boards they made while hacking. This is something unfathomable for a ‚Äútrue hacker‚Äù in my eyes, though I think it‚Äôs a step in the right direction within reason. I feel these two groups are similar in that ‚ÄúHardware Hackers‚Äù follow a great deal of the hacker ethic as well. The previously mentioned Homebrew Computer Club open sourced their schematics and code and had some of these centralized places to share and build on ideas as a group.&lt;/p&gt;

&lt;p&gt;This entrepreneurial spirit is both good and bad, where it completely shifted the hacker culture towards billion-dollar companies, but largely broke the idea of hacking together for the spirit of it. A great thing about this shift though was these hackers were able to create and sell affordable technology to the masses, like the Apple I or even the Tiny BASIC interpreter. This sparked a huge boom of ‚Äúregular‚Äù people in tech and lead to the world we know today. I think largely this change is for the better, from the ‚Äútrue hacker‚Äù to these new ‚Äúhardware hackers‚Äù. Sure, they could be seen as more selfish and not following all of the tenants of the hacker ethics. However, the impact is drastically different of these hackers in their ability to give the people tech as opposed to just staying in and making software that does have innovations but is so narrow in scope. Largely, I think this helped decrease elitism and start the snowball effect rolling of making tech widely available (though I will concede tech was still very male dominated in this era).&lt;/p&gt;

&lt;p&gt;I consider myself an optimist and think that though there are serious negative effects of technology, it is largely a force for good. Think of the great strides it has helped us take in society in terms of availability of resources. Wikipedia, stackoverflow, etc. all come from this idea of widespread tech. I think it is a great necessity to throw away some of the hacker ethic if it means that everyone (to a certain extent) has an equal access to information. The ability for people to be empowered by technology to make a living is so powerful.&lt;/p&gt;

&lt;p&gt;I empathize with ‚Äútrue hackers‚Äù, but some things just need to be close sourced and monetized. With the creation of mass technology comes a mass need for people working in technology. As I mentioned last reading, the hacker ethic and the idea of a ‚Äútrue hacker‚Äù is just not scalable to the general population. Unfortunately, a lot of people like to be paid for the work they do. I think that although this is kind of sad, it makes the world overall way more productive and normalizes technology even more. However, there are happy mediums I think that we can utilize these hacker ethics as best as possible. A lot of companies open source some of their resources to share to the world and collaborate, and that has proven wildly successful especially today. This works in a sense for the parts of companies that aren‚Äôt the ‚Äúsecret sauce‚Äù, or what makes them viable as a standalone business. I have also seen service providers do this, where they freely provide their information, but charge to host instances of it and manage it. I personally see these actions as probably as close to the 2nd code in the hacker ethics.&lt;/p&gt;

&lt;p&gt;Overall, I think everyone should be able to access computers, which is coincidentally the first rule of the hacker ethics. I think it is very important to spread the ideals of it, but with a grain of salt. They can‚Äôt reasonably be followed in today‚Äôs technological ecosystem of mass use. I absolutely believe that we should at least modify some parts of the hacker ethic in order for mass innovation and impact. I honestly feel so strongly about this because I truly believe in wide access to technology, and I think compromising on some things lead to a better overall society. So I would say it is fairly important to spread this, but perhaps a modernized version?&lt;/p&gt;

&lt;p&gt;‚Äì Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">I think it is important to spread bits and pieces of the Hacker Ethic to a wider audience, but the full and ‚Äúcomplete‚Äù version of it doesn‚Äôt necessarily apply to everyone. I will touch on this more, but clearly throwing away the decentralization and free information part does not apply to everyone who seeks to actually make profit off of their works.</summary></entry><entry><title type="html">Reading 03: i don‚Äôt have a cool domain anymore</title><link href="https://sambattalio.github.io/reading-03/" rel="alternate" type="text/html" title="Reading 03: i don‚Äôt have a cool domain anymore" /><published>2021-02-12T11:32:20-05:00</published><updated>2021-02-12T11:32:20-05:00</updated><id>https://sambattalio.github.io/reading-03</id><content type="html" xml:base="https://sambattalio.github.io/reading-03/">&lt;p&gt;Blog 3:&lt;/p&gt;

&lt;p&gt;I think the Game Hackers from this section really seems like next logical step in development of the ‚Äúhacker‚Äù¬¨¬¨¬¨ archetype. In the first part of the ‚Äútrue hackers‚Äù, we had people grinding for the love of the art. In the second section we still had that, however companies and monetary gain started to follow these hardware designers. This section holds true this trend where these folks who are elite hackers start licensing and selling to fit a mass audience of software and computer users. I think the age of the ‚Äúfree‚Äù software hacker has declined greatly as people realize the impact and great wealth they can accumulate with commercial software. I don‚Äôt think this is necessarily a bad thing, where I don‚Äôt think the game development industry would be nearly where it grew from the section if it weren‚Äôt for licensing and software sales. For example, looking at all the royalties from Sierra On-Line helped the dev‚Äôs realize their potential to go full time making games. A whole industry can‚Äôt just be completely propped up by free work. These game hackers are slightly unique however where they are intensely invested in monetization, almost to a point of taking the fun and joy of computing that the other generations of hackers had. Things like copy protection first, though practical, shows what is really going through their minds as they develop. I think this is a necessary evil, however, as certain software it makes sense to pay for and own (as well as keep closed source). Sure, there are open source clones of some programs, but I would absolutely pay for the security and ‚Äúguarantee‚Äù that it works. I think this idea of sales really empowers a lot of software to rise that never would have otherwise. I don‚Äôt think you could have a AAA video game in the world of noncommercial software with stinky DRM. The commitment of a DRM or copy protection provides companies and hackers the peace of mind to know they can invest their time into something without it being stolen. This especially scales up whten you think of how many people work on a game like Red Dead Redemption.&lt;/p&gt;

&lt;p&gt;I think this hacker ethic can in fact survive in the world of commercial software. I won‚Äôt go too into this question as I feel I covered this same line of reasoning in my last blog. However, I think just merely modifying some of the ethic will yield a great compromise and still bode well for the art of computing. I do think that the real world outside of a computer lab has changed hackerism, but for the better. This idea of a hacker is not sustainable outside of a MIT computer lab.&lt;/p&gt;

&lt;p&gt;I think that there is no ‚Äúbetter‚Äù way to be a programmer in this current generation of hacker. Some students and engineers get into this field as a way to succeed in life, empowered by computers, and others come into it not for grades or a job but for the love of it. Surprisingly, I think that these two groups of people I have seen around have meshed well and I think it could spark even more innovation in the field. Having people with other perspectives than just ‚Äúcomputers are life‚Äù is amazing in this age of commercial software. Though Levy might not see them as a ‚Äútrue hacker‚Äù, they certainly are in my book. I don‚Äôt understand the judgement of what a ‚Äúbetter‚Äù programmer is. Sure, more output and cleaner or more efficient code is best for a company. But if two people are 10x‚Äôers why does it matter if one of them is just programming for goals and not for the love of computers in their soul. I honestly find the mentality of loving it from your heart being the best to be a form of elitism especially now. Computing is so ubiquitous, and people of all ages are learning now.&lt;/p&gt;

&lt;p&gt;Going off of that, I don‚Äôt even think people need to learn programming to have a ‚Äúhacker‚Äù spirit around computers. I think there are plenty of novel ways to use computers these days that doesn‚Äôt follow the traditional program. Hacker Culture should be inclusive, and I think it is trending more that way.&lt;/p&gt;

&lt;p&gt;As an aside, the culture in things like the On-Line headquarters (aka. the Summer Camp) sounded really awesome. It must have been really cool to be working in a place like that.&lt;/p&gt;

&lt;p&gt;~ Sam&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Blog 3:</summary></entry><entry><title type="html">Pajama Monkey</title><link href="https://sambattalio.github.io/monkey-picture/" rel="alternate" type="text/html" title="Pajama Monkey" /><published>2021-02-12T05:32:20-05:00</published><updated>2021-02-12T05:32:20-05:00</updated><id>https://sambattalio.github.io/monkey-picture</id><content type="html" xml:base="https://sambattalio.github.io/monkey-picture/">&lt;p&gt;This is a cool monkey picture I found this week online!&lt;/p&gt;</content><author><name>Sam Battalio</name></author><summary type="html">This is a cool monkey picture I found this week online!</summary></entry><entry><title type="html">Reading 01: Hacking Culture</title><link href="https://sambattalio.github.io/reading-01/" rel="alternate" type="text/html" title="Reading 01: Hacking Culture" /><published>2021-02-04T05:32:20-05:00</published><updated>2021-02-04T05:32:20-05:00</updated><id>https://sambattalio.github.io/reading-01</id><content type="html" xml:base="https://sambattalio.github.io/reading-01/">&lt;p&gt;Levy largely described hackers as essentially ‚Äúno-lifers‚Äù who spend their whole life and spirt dedicated to computers and nothing else, not even the simple shower. Through this lifestyle, these hackers lead groundbreaking innovations and create really neat stuff. Generally, these hackers focus more on stretching the limitations of the systems to make art and beauty, and less of the implications. This thematic ‚Äúshunning‚Äù of all things not computation is characteristic of the Levy hacker. We discussed in class a large number of these true hackers don‚Äôt even do their computing coursework, as even that isn‚Äôt important when faced with the prospect of time on a machine.&lt;/p&gt;

&lt;p&gt;To dive into this more, I personally found the Spacewar section to be fairly characteristic of the hacker with long programming sessions, collaboration, and free information. It started as a passion project where one was goaded by his friends to finally make the game and ended with countless hours and modifications from everyone around. This software was freely available for use for any reason at all. This was a big step forward technologically and seemingly way ahead of its time. I found it very interesting the hacker atmosphere and culture throughout this process, where all the hackers were excited and embraced contributions (as long as they aren‚Äôt crazy and unannounced). It was embraced by the community so much that it would ship on the PDP-1 for diagnostics. It seems from this that a ‚ÄúTrue Hacker‚Äù carries a passion for collaboration as well as the grind of programming. I found it funny that there was a falloff in some hackers‚Äô enjoyment of the game when they stopped heavily programming it. This falloff represents, to me, that for most ‚ÄúTrue Hackers‚Äù the enjoyment heavily comes from the grind and the road along the way, and not the end program.&lt;/p&gt;

&lt;p&gt;Another example I find of a ‚Äútrue hacker‚Äù is Terry Davis, creator of TempleOS. Though facing mental illness, the hacker mentality was strong with Davis. He basically worked nonstop on his operating system for a decade of his life. I won‚Äôt get too much into this, but I find Terry to be a great example of a more modern hacker.&lt;/p&gt;

&lt;p&gt;I originally viewed a hacker or a ‚Äútrue hacker‚Äù as first the movie answer of a Mr. Robot type person, and second as someone who works on side projects or modifies an existing program to benefit others. The latter part of my definition is similar to Levy‚Äôs definition, however does not go as hardcore. I personally think a hacker need not spend their whole lives on the grind or show immense skill on the computer at the first touch of the keys. I found it interesting in the class discussion about the seeming dissonance between ‚Äúour‚Äù idea of a hacker and Levy‚Äôs. It could be the changing environment and landscape, or perhaps ourselves, however there is a clear breakup in the idea of both inclusion and intensity. I feel that though the hacker mentality only holds people to their hacking ability, this largely can be exclusionary and toxic in some groups. If one has never touched a computer before coming to MIT, they would likely be shunned by the ‚Äútrue hackers‚Äù, though there is no tell of the ceiling of this person‚Äôs skill. Next, the idea of intensity, though previously touched on, is something I find so interesting that Levy fixates on. How can a hacker be so limited to those who only see computers? Having experiences outside of the technological world can ignite innovation in a way that reading manuals and studying the hardware cannot.&lt;/p&gt;

&lt;p&gt;Thus, I find personally that a ‚Äútrue hacker‚Äù is not more than one who is curious and continuously seeks to grow to make cool things with computers. I don‚Äôt know why it has to be anything more than that. The idea of a ‚Äútrue hacker‚Äù to me is something I originally would have adored coming into college. The MVP or heroes of computing were people I looked up to when teaching myself to code when I was younger. Now, having spent years programming and working (summers) in industry, I find a lot of their lives to not resonate with me anymore. Though I find it impressive to be that dedicated, I find it not to be sustainable in practice and unhealthy for people to strive for. A lot of these hackers were toxic and not everyone can skirt burnout like these folks seemingly did.&lt;/p&gt;

&lt;p&gt;Overall, I definitely do not find myself aspiring to be a ‚Äútrue hacker‚Äù anymore. I honestly don‚Äôt know when this shift in mentality came, but it has grown stronger and stronger as time passes. I don‚Äôt want to be an RMS, though their impact on computing was so strong. I think people like them are unsustainable and are talents that come few a generation. I know I will be happy making cool stuff while not necessarily knowing everything about the computer/program I use or making something limit stretching. A good long coding session is honestly a blast in the right setting, but the sacrifices around being Levy‚Äôs true hacker are so steep I don‚Äôt think I could do it. However, I would like to consider myself still a hacker. I create what I think are cool programs to fill my needs, and I love to work on projects alone or with others. I aspire to continue this work of side projects and keeping the passion of computers in my life as I go into industry.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sam&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Sam Battalio</name></author><summary type="html">Levy largely described hackers as essentially ‚Äúno-lifers‚Äù who spend their whole life and spirt dedicated to computers and nothing else, not even the simple shower. Through this lifestyle, these hackers lead groundbreaking innovations and create really neat stuff. Generally, these hackers focus more on stretching the limitations of the systems to make art and beauty, and less of the implications. This thematic ‚Äúshunning‚Äù of all things not computation is characteristic of the Levy hacker. We discussed in class a large number of these true hackers don‚Äôt even do their computing coursework, as even that isn‚Äôt important when faced with the prospect of time on a machine.</summary></entry></feed>